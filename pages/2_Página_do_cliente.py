#pages/2_visao_do_cliente.py
# -*- coding: utf-8 -*-
import streamlit as st
import datetime

# --- CONFIGURA√á√ïES DA P√ÅGINA ---
st.set_page_config(layout="centered", page_title="Vis√£o do Cliente", page_icon="üë§")

# --- CONSTANTES E FUN√á√ïES AUXILIARES ---
# √â necess√°rio ter as mesmas constantes aqui para os c√°lculos
DURACAO_EXAMES = {
    'Eletrocardiograma': 8, 'Espirometria': 10, 'Eletroencefalograma': 20,
    'Teste ergom√©trico': 25, 'TVI': 6, 'Audiometria': 8,
    'Consulta oftalmol√≥gica': 15, 'Consulta Ocupacional': 12, 'Raio X': 6,
    'Exame de Sangue': 5
}

def calcular_tempo_espera_para_sala(sala_id, paciente_id, estado_clinica):
    """Calcula a posi√ß√£o na fila e o tempo de espera estimado para um paciente em uma sala espec√≠fica."""
    sala = estado_clinica[sala_id]
    
    tempo_espera = sala['tempo_restante_atendimento']
    
    # Verifica se o paciente j√° est√° na fila
    try:
        posicao_na_fila = sala['fila'].index(paciente_id)
        pessoas_na_frente = posicao_na_fila + 1 # +1 para contar quem est√° em atendimento
        
        # Soma o tempo dos exames das pessoas que est√£o na frente na fila
        for i in range(posicao_na_fila):
            tempo_espera += DURACAO_EXAMES[sala_id]
            
    except ValueError: # Paciente n√£o est√° na fila, ent√£o ele seria o √∫ltimo
        pessoas_na_frente = len(sala['fila']) + 1
        for _ in sala['fila']:
            tempo_espera += DURACAO_EXAMES[sala_id]
            
    return pessoas_na_frente, tempo_espera

# --- T√çTULO E VERIFICA√á√ÉO INICIAL ---
st.title("üë§ Vis√£o da Jornada do Funcion√°rio")
st.markdown("Use a barra de tempo abaixo para selecionar um instante e, em seguida, escolha um funcion√°rio para analisar sua jornada.")

# A p√°gina do cliente s√≥ funciona se uma simula√ß√£o j√° foi executada na p√°gina principal.
if 'historico' not in st.session_state or not st.session_state['historico']:
    st.warning("Por favor, execute uma simula√ß√£o na p√°gina 'Dashboard de Simula√ß√£o' primeiro.", icon="‚ö†Ô∏è")
    st.stop()

# --- CONTROLES DE SELE√á√ÉO (TEMPO E CLIENTE) ---
historico = st.session_state['historico']
cenario = st.session_state['cenario']

# <-- NOVO SLIDER ADICIONADO AQUI -->
# Este slider controla qual minuto da simula√ß√£o ser√° exibido.
minuto_selecionado = st.slider(
    "Selecione o minuto da simula√ß√£o para analisar:", 
    0, 
    len(historico)-1, 
    len(historico)-1 # O valor padr√£o √© o √∫ltimo minuto
)

# Extrai a lista de todos os pacientes que participaram da simula√ß√£o
lista_pacientes = [p['id'] for p in cenario]
paciente_selecionado_id = st.selectbox("Selecione o funcion√°rio:", lista_pacientes)

# --- VISUALIZA√á√ÉO DOS DADOS PARA O MINUTO E CLIENTE SELECIONADOS ---

# <-- MODIFICADO PARA USAR O MINUTO SELECIONADO -->
# Em vez de pegar apenas o √∫ltimo estado, pegamos o estado do minuto que o slider indica.
estado_atual = historico[minuto_selecionado]

if paciente_selecionado_id:
    # Encontrar os dados do paciente selecionado no estado ATUAL da simula√ß√£o
    paciente_info = None
    for p in estado_atual['pacientes_ativos'] + estado_atual['pacientes_finalizados']:
        if p['id'] == paciente_selecionado_id:
            paciente_info = p
            break
    
    # Se o paciente ainda n√£o chegou na cl√≠nica no minuto selecionado
    if not paciente_info:
        st.info(f"{paciente_selecionado_id} ainda n√£o havia chegado √† cl√≠nica no minuto {minuto_selecionado}.")
        st.stop()

    # --- EXIBI√á√ÉO DA JORNADA DO PACIENTE ---
    st.divider()

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Exames Conclu√≠dos")
        if paciente_info['exames_concluidos']:
            for exame in paciente_info['exames_concluidos']:
                st.markdown(f"‚úÖ {exame}")
        else:
            st.info("Nenhum exame conclu√≠do ainda.")
    
    with col2:
        exames_pendentes = [e for e in paciente_info['exames_necessarios'] if e not in paciente_info['exames_concluidos']]
        st.subheader("Exames Pendentes")
        if exames_pendentes:
            for exame in exames_pendentes:
                st.markdown(f"üìã {exame}")
        else:
            st.success("Todos os exames foram conclu√≠dos!")
            
    st.divider()

    # --- C√ÅLCULO E EXIBI√á√ÉO DO PR√ìXIMO PASSO ---
    st.header(f"‚û°Ô∏è Pr√≥ximo Passo no Minuto {minuto_selecionado}")

    if len(paciente_info['exames_concluidos']) == len(paciente_info['exames_necessarios']):
        st.balloons()
        st.success(f"Parab√©ns, {paciente_selecionado_id}! Neste minuto, sua jornada de exames j√° havia sido finalizada.")
    
    elif paciente_info['status'] == 'em_exame':
        st.info(f"Neste instante, voc√™ est√° em atendimento no exame: **{paciente_info['local_atual']}**", icon="üßë‚Äç‚öïÔ∏è")

    else:
        clinica_atual = estado_atual['clinica']
        
        if paciente_info['status'] == 'em_fila':
            proximo_destino = paciente_info['local_atual'].replace("fila de ", "")
        else:
            from app import encontrar_proximo_exame
            proximo_destino = encontrar_proximo_exame(paciente_info, clinica_atual)

        if not proximo_destino:
            st.info("Aguardando a libera√ß√£o de uma sala compat√≠vel...")
        else:
            pessoas_na_frente, tempo_de_espera = calcular_tempo_espera_para_sala(proximo_destino, paciente_selecionado_id, clinica_atual)
            
            # C√°lculo do hor√°rio estimado
            hora_inicio_clinica = datetime.datetime.now().replace(hour=8, minute=0, second=0, microsecond=0)
            hora_atual_simulacao = hora_inicio_clinica + datetime.timedelta(minutes=minuto_selecionado)
            horario_estimado_atendimento = hora_atual_simulacao + datetime.timedelta(minutes=tempo_de_espera)
            
            st.info(f"O sistema direciona voc√™ para: **{proximo_destino}**")
            
            kpi1, kpi2, kpi3 = st.columns(3)
            with kpi1:
                st.metric(label="üö∂ Pessoas na sua frente", value=f"{pessoas_na_frente}")
            with kpi2:
                st.metric(label="‚è≥ Tempo de Espera Estimado", value=f"~{tempo_de_espera} min")
            with kpi3:
                st.metric(label="üïí Hor√°rio Estimado", value=horario_estimado_atendimento.strftime('%H:%M'))